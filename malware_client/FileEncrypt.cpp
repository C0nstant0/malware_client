#include <iostream>
#include "FileEncrypt.hpp"



/**
 *  램던 키 생성
*/
unsigned char* generateKey() {
    srand(std::time(nullptr));
    unsigned char* key = new unsigned char[4 * 4];;

    for (int i = 0; i < 16; i++) {
        key[i] = rand() % 256;
    }
    return key;
}


/**
 *  파일 암호화
*/
void getEncryptText(unsigned char* plain, unsigned int plainLength, unsigned char* key, unsigned char* cipher) {
    AES aes(AESKeyLength::AES_256);
    cipher = aes.EncryptECB(plain, plainLength, key);
}

/**
 *  파일 복호화
*/
void getDecryptText(unsigned char* cipher, unsigned int cipherLength, unsigned char* key, unsigned char* plain) {
    AES aes(AESKeyLength::AES_256);
    plain = aes.DecryptECB(cipher, cipherLength, key);
}


/**
 * 암호화 동작 테스트 함수
*/
void cryptoTest() {
    unsigned int plainLength = 1024 * sizeof(unsigned char);
    unsigned char* key = generateKey();
    unsigned char plain[] = { 'h', 'e', 'l', 'l', 'o', ' ', 'm', 'y', ' ', 'n', 'a', 'm', 'e', ' ', 'i', 's', ' ', 's', 'd', 'e', 'v', '!', };
    unsigned char cipher[32];
    getEncryptText(plain, plainLength, key, cipher);
    getDecryptText(cipher, plainLength, key, plain);
    cout << plain << endl;
}
